[
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "Exchange",
        "importPath": "kombu",
        "description": "kombu",
        "isExtraImport": true,
        "detail": "kombu",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "kombu",
        "description": "kombu",
        "isExtraImport": true,
        "detail": "kombu",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "celery.utils.log",
        "description": "celery.utils.log",
        "isExtraImport": true,
        "detail": "celery.utils.log",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "PLATFORM_NAME",
        "importPath": "consts.platform",
        "description": "consts.platform",
        "isExtraImport": true,
        "detail": "consts.platform",
        "documentation": {}
    },
    {
        "label": "PLATFORM_VERSION",
        "importPath": "consts.platform",
        "description": "consts.platform",
        "isExtraImport": true,
        "detail": "consts.platform",
        "documentation": {}
    },
    {
        "label": "HostIp",
        "importPath": "library.host",
        "description": "library.host",
        "isExtraImport": true,
        "detail": "library.host",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "apps.celery_app.processor.math",
        "description": "apps.celery_app.processor.math",
        "peekOfCode": "def add():\n    pass",
        "detail": "apps.celery_app.processor.math",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "apps.celery_app.app",
        "description": "apps.celery_app.app",
        "peekOfCode": "app = Celery(\"Elijahxb's Celery App\")\napp.config_from_object(\"apps.celery_app.setting\")",
        "detail": "apps.celery_app.app",
        "documentation": {}
    },
    {
        "label": "broker_url",
        "kind": 5,
        "importPath": "apps.celery_app.setting",
        "description": "apps.celery_app.setting",
        "peekOfCode": "broker_url = 'redis://127.0.0.1:6379/1'\nresult_backend = 'redis://127.0.0.1:6379/2'\nbroker_connection_retry=False\nbroker_pool_limit = 0\nbroker_heartbeat = 10\nbroker_connection_timeout = 30\n# 结果处理\ntask_serializer = 'json'\nresult_serializer = 'json'\nresult_compression = \"zlib\"",
        "detail": "apps.celery_app.setting",
        "documentation": {}
    },
    {
        "label": "result_backend",
        "kind": 5,
        "importPath": "apps.celery_app.setting",
        "description": "apps.celery_app.setting",
        "peekOfCode": "result_backend = 'redis://127.0.0.1:6379/2'\nbroker_connection_retry=False\nbroker_pool_limit = 0\nbroker_heartbeat = 10\nbroker_connection_timeout = 30\n# 结果处理\ntask_serializer = 'json'\nresult_serializer = 'json'\nresult_compression = \"zlib\"\n# 超时配置",
        "detail": "apps.celery_app.setting",
        "documentation": {}
    },
    {
        "label": "broker_pool_limit",
        "kind": 5,
        "importPath": "apps.celery_app.setting",
        "description": "apps.celery_app.setting",
        "peekOfCode": "broker_pool_limit = 0\nbroker_heartbeat = 10\nbroker_connection_timeout = 30\n# 结果处理\ntask_serializer = 'json'\nresult_serializer = 'json'\nresult_compression = \"zlib\"\n# 超时配置\nevent_queue_expires = 60\nresult_expire = 60 * 10",
        "detail": "apps.celery_app.setting",
        "documentation": {}
    },
    {
        "label": "broker_heartbeat",
        "kind": 5,
        "importPath": "apps.celery_app.setting",
        "description": "apps.celery_app.setting",
        "peekOfCode": "broker_heartbeat = 10\nbroker_connection_timeout = 30\n# 结果处理\ntask_serializer = 'json'\nresult_serializer = 'json'\nresult_compression = \"zlib\"\n# 超时配置\nevent_queue_expires = 60\nresult_expire = 60 * 10\n# 默认路由",
        "detail": "apps.celery_app.setting",
        "documentation": {}
    },
    {
        "label": "broker_connection_timeout",
        "kind": 5,
        "importPath": "apps.celery_app.setting",
        "description": "apps.celery_app.setting",
        "peekOfCode": "broker_connection_timeout = 30\n# 结果处理\ntask_serializer = 'json'\nresult_serializer = 'json'\nresult_compression = \"zlib\"\n# 超时配置\nevent_queue_expires = 60\nresult_expire = 60 * 10\n# 默认路由\ntask_default_queue='default',",
        "detail": "apps.celery_app.setting",
        "documentation": {}
    },
    {
        "label": "task_serializer",
        "kind": 5,
        "importPath": "apps.celery_app.setting",
        "description": "apps.celery_app.setting",
        "peekOfCode": "task_serializer = 'json'\nresult_serializer = 'json'\nresult_compression = \"zlib\"\n# 超时配置\nevent_queue_expires = 60\nresult_expire = 60 * 10\n# 默认路由\ntask_default_queue='default',\ntask_default_exchange='default',\nresult_exchange='default',",
        "detail": "apps.celery_app.setting",
        "documentation": {}
    },
    {
        "label": "result_serializer",
        "kind": 5,
        "importPath": "apps.celery_app.setting",
        "description": "apps.celery_app.setting",
        "peekOfCode": "result_serializer = 'json'\nresult_compression = \"zlib\"\n# 超时配置\nevent_queue_expires = 60\nresult_expire = 60 * 10\n# 默认路由\ntask_default_queue='default',\ntask_default_exchange='default',\nresult_exchange='default',\ntimezone = 'Asia/Shanghai'",
        "detail": "apps.celery_app.setting",
        "documentation": {}
    },
    {
        "label": "result_compression",
        "kind": 5,
        "importPath": "apps.celery_app.setting",
        "description": "apps.celery_app.setting",
        "peekOfCode": "result_compression = \"zlib\"\n# 超时配置\nevent_queue_expires = 60\nresult_expire = 60 * 10\n# 默认路由\ntask_default_queue='default',\ntask_default_exchange='default',\nresult_exchange='default',\ntimezone = 'Asia/Shanghai'\nenable_utc = False",
        "detail": "apps.celery_app.setting",
        "documentation": {}
    },
    {
        "label": "event_queue_expires",
        "kind": 5,
        "importPath": "apps.celery_app.setting",
        "description": "apps.celery_app.setting",
        "peekOfCode": "event_queue_expires = 60\nresult_expire = 60 * 10\n# 默认路由\ntask_default_queue='default',\ntask_default_exchange='default',\nresult_exchange='default',\ntimezone = 'Asia/Shanghai'\nenable_utc = False\n# 限流\n# task_annotations = {'*': {'rate_limit': '10/m'}}",
        "detail": "apps.celery_app.setting",
        "documentation": {}
    },
    {
        "label": "result_expire",
        "kind": 5,
        "importPath": "apps.celery_app.setting",
        "description": "apps.celery_app.setting",
        "peekOfCode": "result_expire = 60 * 10\n# 默认路由\ntask_default_queue='default',\ntask_default_exchange='default',\nresult_exchange='default',\ntimezone = 'Asia/Shanghai'\nenable_utc = False\n# 限流\n# task_annotations = {'*': {'rate_limit': '10/m'}}\ntask_annotations = {'apps.celery_app.processor.math.add': {'rate_limit': '10/m'}}",
        "detail": "apps.celery_app.setting",
        "documentation": {}
    },
    {
        "label": "timezone",
        "kind": 5,
        "importPath": "apps.celery_app.setting",
        "description": "apps.celery_app.setting",
        "peekOfCode": "timezone = 'Asia/Shanghai'\nenable_utc = False\n# 限流\n# task_annotations = {'*': {'rate_limit': '10/m'}}\ntask_annotations = {'apps.celery_app.processor.math.add': {'rate_limit': '10/m'}}\nworker_prefetch_multiplier = 1\n# 队列\ntask_queues = (\n    Queue(name=\"math\", exchange=Exchange(name=\"math\", type=\"direct\"), routing_key=\"math\"),\n    Queue(name=\"default\", exchange=Exchange(name=\"default\", type=\"direct\"), routing_key=\"default\")",
        "detail": "apps.celery_app.setting",
        "documentation": {}
    },
    {
        "label": "enable_utc",
        "kind": 5,
        "importPath": "apps.celery_app.setting",
        "description": "apps.celery_app.setting",
        "peekOfCode": "enable_utc = False\n# 限流\n# task_annotations = {'*': {'rate_limit': '10/m'}}\ntask_annotations = {'apps.celery_app.processor.math.add': {'rate_limit': '10/m'}}\nworker_prefetch_multiplier = 1\n# 队列\ntask_queues = (\n    Queue(name=\"math\", exchange=Exchange(name=\"math\", type=\"direct\"), routing_key=\"math\"),\n    Queue(name=\"default\", exchange=Exchange(name=\"default\", type=\"direct\"), routing_key=\"default\")\n)",
        "detail": "apps.celery_app.setting",
        "documentation": {}
    },
    {
        "label": "task_annotations",
        "kind": 5,
        "importPath": "apps.celery_app.setting",
        "description": "apps.celery_app.setting",
        "peekOfCode": "task_annotations = {'apps.celery_app.processor.math.add': {'rate_limit': '10/m'}}\nworker_prefetch_multiplier = 1\n# 队列\ntask_queues = (\n    Queue(name=\"math\", exchange=Exchange(name=\"math\", type=\"direct\"), routing_key=\"math\"),\n    Queue(name=\"default\", exchange=Exchange(name=\"default\", type=\"direct\"), routing_key=\"default\")\n)\n# 路由\ntask_routes = {\n    \"default\":{",
        "detail": "apps.celery_app.setting",
        "documentation": {}
    },
    {
        "label": "worker_prefetch_multiplier",
        "kind": 5,
        "importPath": "apps.celery_app.setting",
        "description": "apps.celery_app.setting",
        "peekOfCode": "worker_prefetch_multiplier = 1\n# 队列\ntask_queues = (\n    Queue(name=\"math\", exchange=Exchange(name=\"math\", type=\"direct\"), routing_key=\"math\"),\n    Queue(name=\"default\", exchange=Exchange(name=\"default\", type=\"direct\"), routing_key=\"default\")\n)\n# 路由\ntask_routes = {\n    \"default\":{\n      \"queue\": \"default\",",
        "detail": "apps.celery_app.setting",
        "documentation": {}
    },
    {
        "label": "task_queues",
        "kind": 5,
        "importPath": "apps.celery_app.setting",
        "description": "apps.celery_app.setting",
        "peekOfCode": "task_queues = (\n    Queue(name=\"math\", exchange=Exchange(name=\"math\", type=\"direct\"), routing_key=\"math\"),\n    Queue(name=\"default\", exchange=Exchange(name=\"default\", type=\"direct\"), routing_key=\"default\")\n)\n# 路由\ntask_routes = {\n    \"default\":{\n      \"queue\": \"default\",\n      \"routing_key\": \"default\"  \n    },",
        "detail": "apps.celery_app.setting",
        "documentation": {}
    },
    {
        "label": "task_routes",
        "kind": 5,
        "importPath": "apps.celery_app.setting",
        "description": "apps.celery_app.setting",
        "peekOfCode": "task_routes = {\n    \"default\":{\n      \"queue\": \"default\",\n      \"routing_key\": \"default\"  \n    },\n    'apps.celery_app.processor.math.add': {\n        'queue': 'math',\n        'routing_key': 'math.add',\n        'serializer': 'json',\n    },",
        "detail": "apps.celery_app.setting",
        "documentation": {}
    },
    {
        "label": "worker_logger",
        "kind": 5,
        "importPath": "apps.fastapi_app.controller.default",
        "description": "apps.fastapi_app.controller.default",
        "peekOfCode": "worker_logger = get_logger('celery.worker')",
        "detail": "apps.fastapi_app.controller.default",
        "documentation": {}
    },
    {
        "label": "PLATFORM_NAME",
        "kind": 5,
        "importPath": "consts.platform",
        "description": "consts.platform",
        "peekOfCode": "PLATFORM_NAME = \"Titan\"\nPLATFORM_VERSION = \"1.0.0\"",
        "detail": "consts.platform",
        "documentation": {}
    },
    {
        "label": "PLATFORM_VERSION",
        "kind": 5,
        "importPath": "consts.platform",
        "description": "consts.platform",
        "peekOfCode": "PLATFORM_VERSION = \"1.0.0\"",
        "detail": "consts.platform",
        "documentation": {}
    },
    {
        "label": "HostIp",
        "kind": 6,
        "importPath": "library.host",
        "description": "library.host",
        "peekOfCode": "class HostIp(object):\n    @staticmethod\n    def get_host_ip():\n        hostname = socket.gethostname()\n        return hostname, socket.gethostbyname(hostname)\nif __name__ == \"__main__\":\n    print(HostIp.get_host_ip())",
        "detail": "library.host",
        "documentation": {}
    },
    {
        "label": "JSONFormatter",
        "kind": 6,
        "importPath": "logs.format",
        "description": "logs.format",
        "peekOfCode": "class JSONFormatter(logging.Formatter):\n    host_name, host_ip = HostIp.get_host_ip()\n    # REMOVE_ATTR = [\"filename\", \"module\", \"exc_text\", \"stack_info\", \"created\", \"msecs\", \"relativeCreated\", \"exc_info\", \"msg\"]\n    REMOVE_ATTR = []\n    def format(self, record):\n        extra = self.build_record(record)\n        self.set_format_time(extra)\n        self.set_host_ip(extra)\n        self.set_platform_info(extra)\n        extra['message'] = record.msg",
        "detail": "logs.format",
        "documentation": {}
    },
    {
        "label": "Titan",
        "kind": 6,
        "importPath": "logs.titan",
        "description": "logs.titan",
        "peekOfCode": "class Titan(object):\n    @cached_property\n    def Platform():\n        logger = logging.getLogger(\"Platform\")",
        "detail": "logs.titan",
        "documentation": {}
    }
]